public void playerRedStrategy(){
        //leave these top 3 lines at the top
        playerRed = "Janet";  //put your name here
        showText(playerRed,getWidth()-70,100); //shows your name
        GreenfootImage image2 = new GreenfootImage("red.png");  //sets image to red checker
        String colorInitial = new String("r");  //fills the 2d array grid with this value
        
        
        if(firstPlay)
        {
            placeCol(3, colorInitial, image2);
        }
        else
        {
           if(getObjects(Checker.class).size()==1)
           {
               if(grid[5][1]!=null)
               {
                 placeCol(2, colorInitial, image2);  
                }
                else if(grid[5][5]!=null)
                {
                 placeCol(4, colorInitial, image2);   
                }
                else
                {
                    placeCol(3, colorInitial, image2);
                }
            }
        }
        
        int colToPlace = (int)(Math.random()*7);
        
        //replace the following code with your strategy
        //but the second line shows you how to place your checker
        
        
        int[][] map = new int[6][7]; //creates gameboard
        for(int r=0; r<map.length; r++)
        {
            for(int c=0; c<map[0].length; c++)
            {
                if(grid[r][c]!=null)
                {
                    if(grid[r][c].equals(colorInitial))
                    {
                        map[r][c] = 1;
                    }
                    else
                    {
                        map[r][c] = -1;
                    }
                }
                else
                {
                 map[r][c] = 0;   
                }
            }
        }
       
        
        //checks possible winning move
        int col=0;
        int round=0;
        boolean posWin = false;
        while(col<grid[0].length && posWin==false && round<2)
        {   
            if(grid[0][col]==null)
            {
                if(round==1)
                {
                    grid[0][col] = "b";
                }
                else
                {
                    grid[0][col] = colorInitial;
                }
                dropGrid();
                if(checkForWinner()!=null)
                {
                  posWin = true;
                  for(int r=0; r<grid.length; r++)
                  {
                     for(int c=0; c<grid[0].length; c++)
                     {
                         if(map[r][c]==0)
                            grid[r][c] = null;
                     }
                  }
                  placeCol(col, colorInitial, image2); //wins 
                }
                else
                {
                  if(col<6)
                  {
                      col++;                      
                  }
                  else
                  {
                     col=0;
                     round++;
                  }
                    for(int r=0; r<grid.length; r++)
                  {
                     for(int c=0; c<grid[0].length; c++)
                     {
                         if(map[r][c]==0)
                            grid[r][c] = null;
                     }
                  }
                }
            }
            else
            {
             col++;   
            }
        }
        //checks possible losing moves
        removeObjects(getObjects(Ring.class));
        
        boolean[] playable = new boolean[7];
        
        int col3 = 0;
        for(int i=0; i<playable.length; i++)
        {
            playable[i] = false;
            if(posWin==false && grid[0][col3]==null)
            {
                playable[i] = true;
                grid[0][col3] = colorInitial;
                dropGrid();
                int col2 = 0;
                while(col2<grid[0].length)
                {
                    if(grid[0][col2]==null)
                    {
                        grid[0][col2] = "b";
                        dropGrid();
                        if(checkForWinner()!=null)
                        {
                         playable[i] = false; 
                         for(int r=0; r<grid.length; r++)
                            {
                             for(int c=0; c<grid[0].length; c++)
                             {
                                 if(map[r][c]==0)
                                    grid[r][c] = null;
                             }
                            }
                        }
                        col2++;
                    }
                    else
                    {
                     col2++;   
                    }
                    
                }
                for(int r=0; r<grid.length; r++)
                {
                 for(int c=0; c<grid[0].length; c++)
                 {
                     if(map[r][c]==0)
                        grid[r][c] = null;
                 }
                }
            }
            
             col3++;   
            
        }
        
        //resets grid
        removeObjects(getObjects(Ring.class));
        for(int r=0; r<grid.length; r++)
        {
            for(int c=0; c<grid[0].length-4; c++)
            {
                if(map[r][c]==0 && map[r][c+4]==0 && r==5)
                {
                    int post = map[r][c+1] + map[r][c+2] + map[r][c+3];
                    if(post==2 || post==-2)
                    {
                        for(int q=1; q<4; q++)
                        {
                            if(map[r][c+q]==0)
                            {
                                placeCol(c+q, colorInitial,image2);
                            }
                        }
                    }
                    
                }
                
                if(map[r][c]==0 && map[r][c+4]==0 && r!=5)
                {
                    int post = map[r][c+1] + map[r][c+2] + map[r][c+3];
                    if(post==2 || post==-2)
                    {
                        boolean works = true;
                        for(int w=0; w<4; w++)
                        {
                            if(map[r+1][c+w]==0)
                            {
                                works = false;
                            }
                        }
                        
                        if(works)
                        {
                            for(int q=1; q<4; q++)
                            {
                                if(map[r][c+q]==0)
                                {
                                    placeCol(c+q, colorInitial,image2);
                                }
                            }
                        }
                    }
                    
                    
                }
            }
        }
        
        
        
        int maxPos = 0;
        for(int x=0; x<playable.length; x++)
        {
            if(playable[x])
            {
                maxPos++;
            }
        }
        int[] moves = new int[maxPos];
        if(maxPos==0)
        {
            placeCol(colToPlace,colorInitial,image2); //failsafe
        }
        else
        {
            int j=0;
            for(int x=0; x<playable.length; x++)
            {
             if(playable[x])
             {
                 moves[j] = x;
                 j++;
                }
            }
            colToPlace = (int) (Math.random()*maxPos);
            placeCol(moves[colToPlace],colorInitial,image2);  //plays in the specified col and fills the 2D array with the 2nd parameter String
        }
        

        
        //placeCol(colToPlace,colorInitial,image2);  //plays in the specified col and fills the 2D array with the 2nd parameter String
         
    }
